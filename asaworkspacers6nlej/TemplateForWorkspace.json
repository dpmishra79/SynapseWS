{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspacers6nlej"
		},
		"asacosmosdb01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asacosmosdb01'"
		},
		"asadatalakers6nlej_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalakers6nlej'"
		},
		"asastorers6nlej_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastorers6nlej'"
		},
		"asaworkspacers6nlej-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspacers6nlej-WorkspaceDefaultSqlServer'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'"
		},
		"asadatalakers6nlej_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakers6nlej.dfs.core.windows.net"
		},
		"asakeyvaultrs6nlej_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvaultrs6nlej.vault.azure.net/"
		},
		"asaworkspacers6nlej-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakers6nlej.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosCopy')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy User Profile",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CosmosDbSqlApiCollection2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CosmosDbSqlApiCollection1')]",
				"[concat(variables('workspaceId'), '/datasets/CosmosDbSqlApiCollection2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array"
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbSqlApiCollection2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "UserHTAP"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_customerprofile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array"
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakers6nlej",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakers6nlej')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asacosmosdb01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('asacosmosdb01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalakers6nlej')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalakers6nlej_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalakers6nlej_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvaultrs6nlej')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvaultrs6nlej_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastorers6nlej')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastorers6nlej_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspacers6nlej-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspacers6nlej-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspacers6nlej-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspacers6nlej-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultrs6nlej",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultrs6nlej')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\r\n        It ensures column level security by restricting column access to protect sensitive data. */\r\n\r\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\r\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\r\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\r\n        Revenue column to DataAnalystMiami */\r\n\r\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\r\n    select  Top 100 * from wwi_Security.Sale\r\n    where City is not null and state is not null\r\n\r\n    /*  Consider a scenario where there are two users.\r\n        A CEO, who is an authorized  personnel with access to all the information in the database\r\n        and a Data Analyst, to whom only required information should be presented.*/\r\n\r\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\r\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\r\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\r\n\r\n\r\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\r\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\r\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\r\n    */\r\n\r\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\r\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\r\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\r\n\r\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\r\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select TOP 100 * from wwi_security.Sale;\r\n    ---\r\n    -- The following query will succeed since we are not including the Revenue column in the query.\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\r\n    \r\n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\r\n    Revert;\r\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\r\n\r\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\r\n    EXECUTE AS USER ='CEO'\r\n    select * from wwi_security.Sale\r\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ComparePolyCopyINTO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Use COPY to load text file with non-standard row delimiters\n-- POLYBASE can't handle non-standard row delimiter\n\nCREATE TABLE [wwi_staging].DailySalesCounts\n    (\n        [Date] [int]  NOT NULL,\n        [NorthAmerica] [int]  NOT NULL,\n        [SouthAmerica] [int]  NOT NULL,\n        [Europe] [int]  NOT NULL,\n        [Africa] [int]  NOT NULL,\n        [Asia] [int]  NOT NULL\n    )\nGO\n\n-- Replace SUFFIX with the unique suffix for your resources\nCOPY INTO wwi_staging.DailySalesCounts\nFROM 'https://asadatalakers6nlej.dfs.core.windows.net/wwi-02/campaign-analytics/dailycounts.txt'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR='.',\n    ROWTERMINATOR=','\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Configure workload management classification')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Drop objects if they exist\nIF EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\nBEGIN\n    DROP WORKLOAD CLASSIFIER HeavyLoader\nEND;\n\nIF EXISTS (SELECT * FROM sys.workload_management_workload_groups WHERE name = 'BigDataLoad')\nBEGIN\n    DROP WORKLOAD GROUP BigDataLoad\nEND;\n\n--drop user [asa.sql.import01];\n--Create workload group\nCREATE WORKLOAD GROUP BigDataLoad WITH\n  (\n      MIN_PERCENTAGE_RESOURCE = 50, -- integer value\n      REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25, --  (guaranteed min 4 concurrency)\n      CAP_PERCENTAGE_RESOURCE = 100\n  );\n\n-- Create workload classifier\nCREATE WORKLOAD Classifier HeavyLoader WITH\n(\n    Workload_Group ='BigDataLoad',\n    MemberName='asa.sql.import01',\n    IMPORTANCE = HIGH\n);\n\n-- View classifiers\nSELECT * FROM sys.workload_management_workload_classifiers",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\r\n    FS.CustomerID\r\n    ,MIN(FS.Quantity) as MinQuantity\r\n    ,MAX(FS.Quantity) as MaxQuantity\r\n    ,AVG(FS.Price) as AvgPrice\r\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\r\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\r\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\r\nFROM\r\n    wwi_perf.Sale_Heap FS\r\nGROUP BY\r\n    FS.CustomerId",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data loading Scipt')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--polybase\n-- external metadata object\n-- external table --> round robin\n \n-- moving data from external table to round robin table, there are 2 ways; 1.INSERT INTO, 2.CTAS\n\n--CTAS way of loading\n--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-- Replace SUFFIX with the lab workspace id. (rs6nlej)\nCREATE EXTERNAL DATA SOURCE ABSS\nWITH\n( TYPE = HADOOP,\n    LOCATION = 'abfss://wwi-02@asadatalakers6nlej.dfs.core.windows.net'\n);\n\n\nCREATE EXTERNAL FILE FORMAT [ParquetFormat]\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\nGO\n\nCREATE SCHEMA [wwi_external];\nGO\n\nCREATE EXTERNAL TABLE [wwi_external].Sales\n    (\n        [TransactionId] [nvarchar](36)  NOT NULL,\n        [CustomerId] [int]  NOT NULL,\n        [ProductId] [smallint]  NOT NULL,\n        [Quantity] [smallint]  NOT NULL,\n        [Price] [decimal](9,2)  NOT NULL,\n        [TotalAmount] [decimal](9,2)  NOT NULL,\n        [TransactionDate] [int]  NOT NULL,\n        [ProfitAmount] [decimal](9,2)  NOT NULL,\n        [Hour] [tinyint]  NOT NULL,\n        [Minute] [tinyint]  NOT NULL,\n        [StoreId] [smallint]  NOT NULL\n    )\nWITH\n    (\n        LOCATION = '/sale-small/Year=2019',  \n        DATA_SOURCE = ABSS,\n        FILE_FORMAT = [ParquetFormat]  \n    )  \nGO\n\n\n---load external table into round robin table\ncreate schema wwi_staging;\n\n\ncreate table [wwi_staging].[SaleHeap] \nwith\n(\n    DISTRIBUTION=ROUND_ROBIN, --- its must needed\n    HEAP\n)AS\nselect * from [wwi_external].Sales;\n\n--Now we can create dimension & facts as per our need\ncreate table dimension_from_qry\nwith\n(\n    DISTRIBUTION=REPLICATE, --- its must needed\n    clustered COLUMNSTORE INDEX\n)as\nSELECT [CustomerId]\n,[ProductId]\n,[Quantity]\n FROM [wwi_staging].[SaleHeap];\n\n\ncreate table dimension_from_qry_hash\nwith\n(\n    DISTRIBUTION=HASH(CustomerId), --- its must needed\n    clustered COLUMNSTORE INDEX\n)as\nSELECT [CustomerId]\n,[ProductId]\n,[Quantity]\n FROM [wwi_staging].[SaleHeap];\n\n\n\n-- INSERT INTO loading method\n--~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCREATE TABLE [wwi_staging].[SaleHeapEarly]\n( \n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n);\n\n\nINSERT INTO [wwi_staging].[SaleHeapEarly]\nSELECT * FROM [wwi_external].Sales;\n\n\n\n--###########################################################\n-- COPY INTO\n\n\nCREATE TABLE [wwi_staging].[SaleHeapEarlyCOPYINTO]\n( \n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n);\n\n\n\n\nCOPY INTO [wwi_staging].[SaleHeapEarlyCOPYINTO]\nFROM 'https://asadatalakers6nlej.dfs.core.windows.net/wwi-02/sale-small/Year=2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\r\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\r\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\r\n        Let see how */\r\n\r\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \r\n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\r\n\r\n    -- Step:1 Let us first get a view of CustomerInfo table.\r\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name = 'CustomerInfo';\r\n    -- No results returned verify that no data masking has been done yet.\r\n\r\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\r\n    ALTER TABLE wwi_security.CustomerInfo  \r\n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\r\n    GO\r\n    -- The columns are sucessfully masked.\r\n\r\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name ='CustomerInfo';\r\n\r\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\r\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \r\n\r\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:7 Let us remove the data masking using UNMASK permission\r\n    GRANT UNMASK TO DataAnalystMiami;\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT *\r\n    FROM wwi_security.CustomerInfo;\r\n    revert;\r\n    REVOKE UNMASK TO DataAnalystMiami;  \r\n\r\n    ----step:8 Reverting all the changes back to as it was.\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN CreditCard DROP MASKED;\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email DROP MASKED;\r\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\r\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \r\n\tLet see how we can implement row level security in Azure Synapse.*/\r\n\r\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\r\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \r\n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\r\n--      and DataAnalystSanDiego on the Far West region.\r\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\r\n\r\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\r\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\r\n\r\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\r\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\r\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \r\n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\r\n    whom has access to all data.\r\n*/\r\n\r\n-- Review any existing security predicates in the database\r\nSELECT * FROM sys.security_predicates\r\n\r\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\r\n--  a row should be returned in the parent query.\r\nGO\r\n\r\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \r\n    RETURNS TABLE  \r\nWITH SCHEMABINDING  \r\nAS  \r\n    RETURN SELECT 1 AS fn_securitypredicate_result\r\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\r\nGO\r\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\r\nCREATE SECURITY POLICY SalesFilter  \r\nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\r\nON wwi_security.Sale\r\nWITH (STATE = ON);\r\n\r\n------ Allow SELECT permissions to the Sale Table.------\r\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\r\n\r\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\r\nEXECUTE AS USER = 'DataAnalystMiami' \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\r\n\r\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\r\nEXECUTE AS USER = 'DataAnalystSanDiego';\r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- RLS is working indeed.\r\n\r\n-- Step:5 The CEO should be able to see all rows in the table.\r\nEXECUTE AS USER = 'CEO';  \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- And he can.\r\n\r\n--Step:6 To disable the security policy we just created above, we execute the following.\r\nALTER SECURITY POLICY SalesFilter  \r\nWITH (STATE = OFF);\r\n\r\nDROP SECURITY POLICY SalesFilter;\r\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER [User]\n\tWITHOUT LOGIN\n\tWITH DEFAULT_SCHEMA = dbo\n\nGO\n\nGRANT CONNECT TO [User]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE login [asa.sql.import01]\nwith PASSWORD='@Pupu98017'\n\nGO\ncreate user [asa.sql.import01] from login  [asa.sql.import01]\n\n\ndrop user  [asa.sql.import01]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		}
	]
}